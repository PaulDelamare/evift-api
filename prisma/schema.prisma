// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @unique @default(uuid())
  email               String            @unique
  firstname           String
  lastname            String
  password            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  invitation          Invitation[]      @relation("invitation")
  request             Invitation[]
  friend1             Friends[]         @relation("friend1")
  friend2             Friends[]         @relation("friend2")
  userEvent           Event[]
  userEventInvitation EventInvitation[] @relation("userEventInvitation")
  userEventOrganizer  EventInvitation[] @relation("userEventOrganizer")
  userParticipant     Participant[]
  userListGift        ListGift[]
  gifts               Gifts[]           @relation("gift")
  giftsTaken          Gifts[]           @relation("userTaken")
  firstLogin          Boolean           @default(true)
}

// Invitation model (Friends Request)
model Invitation {
  id     String @id @unique @default(uuid())
  user   User   @relation("invitation", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  request   User   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String

  createdAt DateTime @default(now())
}

model Friends {
  id      String @id @unique @default(uuid())
  user    User   @relation("friend1", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id String

  user2   User   @relation("friend2", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id String

  created_at DateTime @default(now())
}

model RoleEvent {
  id          String        @id @unique @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  participant Participant[]
}

model Event {
  id          String            @id @unique @default(uuid())
  name        String
  description String
  address     String
  date        DateTime
  time        String?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  event       Participant[]
  invitation  EventInvitation[]
  listgift    ListEvent[]
}

model Participant {
  id String @id @unique @default(uuid())

  event    Event  @relation(fields: [id_event], references: [id], onDelete: Cascade)
  id_event String

  roleRef RoleEvent @relation(fields: [id_role], references: [id], onDelete: Cascade)
  id_role String

  user    User   @relation(fields: [id_user], references: [id] , onDelete: Cascade)
  id_user String

  eventList ListEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventInvitation {
  id String @id @unique @default(uuid())

  event    Event  @relation(fields: [id_event], references: [id], onDelete: Cascade)
  id_event String

  idUser  User   @relation("userEventInvitation", fields: [id_user], references: [id], onDelete: Cascade)
  id_user String

  idOrganizer  User   @relation("userEventOrganizer", fields: [id_organizer], references: [id], onDelete: Cascade)
  id_organizer String

  createdAt DateTime @default(now())
}

model ListGift {
  id   String @id @unique @default(uuid())
  name String

  user    User   @relation(fields: [id_user], references: [id], onDelete: Cascade)
  id_user String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gifts     Gifts[]
  listEvent ListEvent[]
}

model Gifts {
  id String @id @unique @default(uuid())

  id_list String
  list    ListGift @relation(fields: [id_list], references: [id], onDelete: Cascade)

  id_user String
  user    User   @relation("gift", fields: [id_user], references: [id], onDelete: Cascade)

  taken Boolean @default(false)

  userTaken    User?   @relation("userTaken", fields: [id_userTaken], references: [id], onDelete: Cascade)
  id_userTaken String?

  name     String
  quantity Int
  url      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListEvent {
  id String @id @unique @default(uuid())

  id_event String
  event    Event  @relation(fields: [id_event], references: [id], onDelete: Cascade)

  id_participant String
  participant    Participant @relation(fields: [id_participant], references: [id], onDelete: Cascade)

  id_list String
  list    ListGift @relation(fields: [id_list], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
